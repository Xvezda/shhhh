#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2019 Xvezda <https://xvezda.com/>
#
# Use of this source code is governed by an MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT.
# ===============================
# âœŠ Fist; Fast gist creator script

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import os
import sys
import json
import argparse


GIST_API_URL = 'https://api.github.com/gists'

# Overwrite unsafe input
if sys.version_info.major < 3:
    input = raw_input


def print_with_flush(msg, end='\n'):
    sys.stdout.write(msg + end)
    sys.stdout.flush()


def print_stderr(msg, end='\n'):
    sys.stderr.write(msg + end)


def input_until(expr='val', msg='', fail_msg=''):
    try:
        while True:
            val = input(msg)
            if not eval(expr):
                print_stderr(fail_msg)
                continue
            else:
                return val
    except Exception:
        pass
    finally:
        del val


def escape_dquote(text):
    return text.replace('"', '\\"')


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v', action='store_true')
    parser.add_argument('--dry', '-d', action='store_true')
    parser.add_argument('--user', '-u', nargs='?', type=str)
    parser.add_argument('--token', '-t', nargs='?', type=str)
    parser.add_argument('files', nargs='*')
    args = parser.parse_args()

    if not args.token:
        token = os.environ.get('GITHUB_TOKEN_FIST')
        if not token:
            print_stderr('Token not found!')
            return 1
    else:
        token = args.token

    obj = {
        'files': {},
    }
    if not args.files:
        text = sys.stdin.read()
        sys.stdin.close()
        sys.stdin = os.fdopen(1)

        filename = input_until(msg='filename: ',
                               fail_msg='You must provide filename '
                                        'when pipe into fist.')
        # Verify
        filename = os.path.basename(filename)

        obj['files'][filename] = {}
        obj['files'][filename]['content'] = text
    else:
        for file_ in args.files:
            with open(file_, 'r') as f:
                filename = os.path.basename(file_)
                obj['files'][filename] = {}
                obj['files'][filename]['content'] = f.read()
    description = input('description (optional): ')
    if not description:
        pass
    else:
        obj['description'] = description

    public = input('public (optional - default: Y) [Y/n]: ')
    if public == 'Y' or not public:
        public = True
    else:
        public = False
    obj['public'] = public

    if not args.user:
        username = os.environ.get('GITHUB_USERNAME')
        if not username:
            username = input_until(msg='username: ',
                                   fail_msg='User name is empty.')
    else:
        username = args.user

    import base64
    credential = ':'.join([username, token])
    authkey = base64.encodestring(credential)[:-1]

    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Basic %s' % (authkey,),
    }

    if args.dry:
        print()
        print('POST /gists HTTP/1.1')
        print('Host: api.github.com')
        for key in headers:
            print(':'.join([key, headers[key]]))
        if args.verbose:
            print('[Verbose] Authorization: Basic %s (base64)' % (credential,))
        print()
        print(json.dumps(obj))
        return 0

    try:
        import requests
        def send(content):
            response = requests.post(GIST_API_URL, headers=headers, data=content)
            if args.verbose:
                print('[Verbose] requested by requests module')
            return response.text
    except ImportError:
        import subprocess
        def send(content):
            command = ['curl', '-s', '-X', 'POST']
            for key in headers:
                command.append('-H')
                command.append('"%s"' % (
                    escape_dquote(': '.join([key, headers[key]]),)))
            command.append('-d')
            import shlex
            command.append('"%s"' % (escape_dquote(content),))
            command.append(GIST_API_URL)
            if args.verbose:
                print('[Verbose] requested by command line curl')
            return subprocess.check_output(shlex.split(' '.join(command)))

    r = send(json.dumps(obj))
    result = json.loads(r)

    print(result.get('html_url'))


if __name__ == '__main__':
    main()

# vim:ft=python
